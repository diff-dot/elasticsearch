import { EsClient } from './EsClient';
import { RequestParams, ApiResponse } from '@elastic/elasticsearch';
import { classToPlain, plainToClass } from 'class-transformer';
import moment = require('moment');
import { BulkResult } from './type/BulkResult';
import { InvalidTimeRangeError } from './error/InvalidTimeRangeError';
import { PeriodType } from '../type/PeriodType';
import { MultiGetId } from './type/MultiGetId';
import DateUtils from '../util/DateUtils';
import { EsHostOptions } from '../../config/options/EsHostOptions';
import { ServerError } from '../error/ServerError';
import { BuildQueryParams } from './type/BuildQueryParams';
import { Entity, Repository, getEntityIdProps, getRoutingIdProp } from '@diff./repository';

export declare type ClassType<T> = {
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  new (...args: any[]): T;
};

// eslint-disable-next-line @typescript-eslint/no-empty-interface
export interface IndexBody {}

export interface UpsertBody {
  doc_as_upsert: boolean;
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  doc: any;
}

export interface UpdateBody {
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  doc: any;
}

export interface GetResponse {
  _id: string;
  _version: number;
  _seq_no: number;
  _primary_term: number;
  _source: unknown;
}

export interface MgetResponse<T> {
  docs: {
    _source: T;
  }[];
}

export interface AggregationsResponse {
  took: number;
  timed_out: boolean;
  _shards: {
    total: number;
    successful: number;
    skipped: number;
    failed: number;
  };
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  aggregations: any;
}

export interface UpdateResponse {
  result: 'created' | 'updated' | 'noop' | 'deleted';
  _index: string;
  _id: string;
  _version: number;
  _seq_no: number;
  _primary_term: number;
  status: number;
  error: {
    type: string;
    reason: string;
  };
}

export abstract class EsRepository extends Repository {
  readonly client: EsClient;
  constructor() {
    super();
    this.client = EsClient.instance(this.esHost());
  }

  protected abstract esHost(): EsHostOptions;

  /**
   * Entity 의 entityId 추출
   * - entityId 로 사용할 값이 지정된 property 는 EntityId Decorator 로 지정
   * - 다수의 propertiy 에 entityId 가 지정된 경우 entityId options 의 seq 및 propertiy 이름 순서대로 값을 delimiter로 결합하여 entityId 값으로 사용
   */
  protected entityId(args: { entity: Entity; delimiter?: string }): string | undefined {
    const { entity, delimiter = '-' } = args;

    // entity id 로 사용할 property 및 옵션 추출
    const entityIdProps = getEntityIdProps(entity);
    if (!entityIdProps) return undefined;

    const entityIdList: { prop: string; seq: number }[] = [];
    for (const [prop, options] of entityIdProps.entries()) {
      entityIdList.push({ prop: prop, seq: options.seq || 0 });
    }

    // seq 기준으로 정렬, seq 가 같을 경우 property 이름순으로 정렬
    const sortedEntityIdList = entityIdList.sort((a, b) => a.seq - b.seq || a.prop.localeCompare(b.prop));

    let entityId: string = '';
    for (const item of sortedEntityIdList) {
      entityId += entity[item.prop as keyof Entity] + delimiter;
    }
    return entityId.substr(0, entityId.length - delimiter.length);
  }

  /**
   * entity 의 routingId 추출
   * - routingId 로 사용할 값이 지정된 property 는 RoutingId Decorator 로 지정
   */
  protected routingId(args: { entity: Entity }): string | undefined {
    const { entity } = args;

    const routingIdProp = getRoutingIdProp(entity);
    return routingIdProp ? entity[routingIdProp as keyof Entity] : undefined;
  }

  public async createEntity(args: { entity: Entity; index: string }): Promise<UpdateResponse> {
    const { entity, index } = args;

    const entityId = this.entityId({ entity });
    if (!entityId) throw new ServerError('Id is requried');

    const indexParams: RequestParams.Create<IndexBody> = {
      index: index,
      id: entityId,
      body: classToPlain(entity)
    };

    const routingId = this.routingId({ entity });
    if (routingId) indexParams.routing = routingId;

    const res: ApiResponse<UpdateResponse> = await this.client.create(indexParams);
    return res.body;
  }

  public async indexEntity(args: { entity: Entity; index: string }): Promise<UpdateResponse> {
    const { entity, index } = args;

    const indexParams: RequestParams.Index<IndexBody> = {
      index: index,
      id: this.entityId({ entity }),
      body: classToPlain(entity)
    };

    const routingId = this.routingId({ entity });
    if (routingId) indexParams.routing = routingId;

    const res: ApiResponse<UpdateResponse> = await this.client.index(indexParams);
    return res.body;
  }

  async entities<T extends Entity>(args: {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    entityClass: { new (...args: any[]): T };
    ids: MultiGetId[];
    index: string;
    source?: string[];
  }): Promise<T[]> {
    const { entityClass, ids, index, source } = args;

    const params: RequestParams.Mget = {
      index,
      _source: source || '*',
      body: {
        docs: ids
      }
    };
    const res: ApiResponse<MgetResponse<T>> = await this.client.mget(params);

    const payload: T[] = [];
    for (const doc of res.body.docs) {
      if (!doc._source) continue;
      const entity = plainToClass(entityClass, doc._source);
      payload.push(entity);
    }

    return payload;
  }

  async entity<T extends Entity>(args: {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    entityClass: { new (...args: any[]): T };
    id: string;
    index: string;
    source?: string[];
    routing?: string;
  }): Promise<T | undefined> {
    const { entityClass, id, index, source, routing } = args;

    const getParmas: RequestParams.Get = {
      index,
      id,
      _source: source || '*'
    };
    if (routing) getParmas.routing = routing;

    let res: ApiResponse<GetResponse>;
    try {
      res = await this.client.get(getParmas);
    } catch (e) {
      return undefined;
    }

    return plainToClass(entityClass, res.body._source);
  }

  async upsertEntity(args: { id: string; entity: Entity; index: string; routing?: string }): Promise<UpdateResponse> {
    const { id, entity, index, routing } = args;

    const upsertParams: RequestParams.Update<UpsertBody> = {
      index: index,
      id,
      body: {
        doc_as_upsert: true,
        doc: classToPlain(entity)
      }
    };
    if (routing) upsertParams.routing = routing;

    const res: ApiResponse<UpdateResponse> = await this.client.update(upsertParams);
    return res.body;
  }

  async updateEntity(args: { id: string; entity: Entity; index: string; routing?: string }): Promise<UpdateResponse> {
    const { id, entity, index, routing } = args;

    const updateParams: RequestParams.Update<UpdateBody> = {
      index: index,
      id,
      body: {
        doc: classToPlain(entity)
      }
    };
    if (routing) updateParams.routing = routing;

    const res: ApiResponse<UpdateResponse> = await this.client.update(updateParams);
    return res.body;
  }

  async deleteEntity(args: { id: string; index: string; routing?: string }): Promise<UpdateResponse> {
    const { id, index, routing } = args;

    const deleteParams: RequestParams.Delete = {
      index: index,
      id
    };
    if (routing) deleteParams.routing = routing;

    const res: ApiResponse<UpdateResponse> = await this.client.delete(deleteParams);
    return res.body;
  }

  async refresh(index: string | string[]): Promise<void> {
    await this.client.indices.refresh({
      index,
      ignore_unavailable: true
    });
  }

  async disableRefresh(index: string | string[]): Promise<void> {
    await this.client.indices.putSettings({
      index,
      body: {
        refresh_interval: -1
      }
    });
  }

  async enableRefresh(index: string | string[], intervalSecond = 1): Promise<void> {
    await this.client.indices.putSettings({
      index,
      body: {
        refresh_interval: `${intervalSecond}s`
      }
    });
  }

  async forceMerge(index: string | string[], maxNumSegments = 5): Promise<void> {
    await this.client.indices.forcemerge({
      index,
      ignore_unavailable: true,
      max_num_segments: maxNumSegments
    });
  }

  async buildQuery<T extends RequestParams.Generic>(info: { default: T }, params: BuildQueryParams = {}): Promise<T> {
    /**
     * source 를 빈 배열 ([]) 또는 빈 문자열('') 로 요청하면 source 항목이 모두 제외되는 결과가 기대되지만,
     * 전체 source 항목이 반환됨 기대대로 동작하도록 하기 위해 아래와 같이 값 변경
     * <참고> es클라인언트 모듈에서 boolean 으로 변환하여 체크하여 false 일 경우 값을 무시하는 것으로 예상됨
     */
    if ((Array.isArray(params['source']) && !params['source'].length) || params['source'] === '') {
      params['source'] = ' ';
    }

    let str = JSON.stringify(info.default);
    for (const key of Object.keys(params)) {
      str = str.replace(new RegExp(`["']{{${key}}}["']`, 'g'), JSON.stringify(params[key]));
    }

    return JSON.parse(str);
  }

  async bulk(args: RequestParams.Bulk): Promise<BulkResult> {
    const res = await this.client.bulk(args);
    const items = res.body.items as { index: UpdateResponse; update: UpdateResponse; delete: UpdateResponse; create: UpdateResponse }[];

    let succeed = 0;
    const errors: string[] = [];
    const resultItems: UpdateResponse[] = [];
    for (const item of items) {
      const info = item['index'] || item['update'] || item['delete'] || item['create'];
      resultItems.push(info);

      if (info.result) {
        succeed++;
      } else if (info.error) {
        errors.push(`${info.error.type} - ${info.error.reason}`);
      }
    }

    return {
      succeed,
      failed: errors.length,
      errors,
      items: resultItems
    };
  }

  /**
   * 오늘로부터 -n일 간의 로그 인덱스 이름들을 리턴
   * https://www.elastic.co/guide/en/elasticsearch/reference/current/date-math-index-names.html
   *
   * @param range
   * @return {string}
   */
  protected indexSelectorByRelDate(prefix: string, dayRange = 0, format: string = 'YYYY.MM.dd'): string {
    let names = `<${prefix}{now/d{${format}|+09:00}}>,`;
    for (let i = 0; i < dayRange; i++) {
      names += `<${prefix}{now/d-` + (i + 1) + `d{${format}|+09:00}}>,`;
    }

    return names.slice(0, -1);
  }

  /**
   * 오늘로부터 -n월 간의 로그 인덱스 이름들을 리턴
   * @param range
   * @return {string}
   */
  protected indexSelectorByRelMonth(prefix: string, monthRange = 0, format: string = 'YYYY.MM'): string {
    let names = `<${prefix}{now/m{${format}|+09:00}}>,`;
    for (let i = 0; i < monthRange; i++) {
      names += `<${prefix}{now/m-` + (i + 1) + `m{${format}|+09:00}}>,`;
    }

    return names.slice(0, -1);
  }

  /**
   * 오늘로부터 -n일 간의 로그 인덱스 이름들을 리턴
   * https://www.elastic.co/guide/en/elasticsearch/reference/current/date-math-index-names.html
   *
   * @param range
   * @return {string}
   */
  protected indexSelectorByRelHour(prefix: string, hourRange = 0, format: string = 'YYYY.MM.dd.HH'): string {
    let names = `<${prefix}{now/h{${format}|+09:00}}>,`;
    for (let i = 0; i < hourRange; i++) {
      names += `<${prefix}{now/h-` + (i + 1) + `h{${format}|+09:00}}>,`;
    }

    return names.slice(0, -1);
  }

  /**
   * 기간별로 인덱스가 분리된 경우, 지정된 기간과 분할 기간에 따라 관련 인덱스 목록을 반환한다.
   * @param prefix 날짜를 제외한 인덱스명 프리픽스
   * @param startAt 범위 시작 ( timestamp )
   * @param endAt 범위 종료 ( timestamp, 범위 종료시점은 포함되지 않음 )
   * @param splitPeriodType 인덱스 분리 주기
   */
  public indexSelectorByTimeRange(prefix: string, startAt: number, endAt: number, splitPeriodType: PeriodType): string {
    if (endAt < startAt) throw new InvalidTimeRangeError('endAt 은 startAt 이후로 지정되어야 합니다.');

    const indexes: string[] = [];

    const startAtDate = moment.unix(startAt).utcOffset(9);
    const endAtDate = moment.unix(endAt).utcOffset(9);

    if (splitPeriodType === PeriodType.YEARLY) {
      const fmt = 'YYYY';
      indexes.push(startAtDate.format(fmt));
      while (indexes.indexOf(endAtDate.format(fmt)) === -1) {
        indexes.push(endAtDate.format(fmt));
        endAtDate.add('-1', 'year');
      }
    } else if (splitPeriodType === PeriodType.MONTHLY) {
      const fmt = 'YYYY.MM';
      indexes.push(startAtDate.format(fmt));
      while (indexes.indexOf(endAtDate.format(fmt)) === -1) {
        indexes.push(endAtDate.format(fmt));
        endAtDate.add('-1', 'month');
      }
    } else if (splitPeriodType === PeriodType.DAILY) {
      const fmt = 'YYYY.MM.DD';
      indexes.push(startAtDate.format(fmt));
      while (indexes.indexOf(endAtDate.format(fmt)) === -1) {
        indexes.push(endAtDate.format(fmt));
        endAtDate.add('-1', 'day');
      }
    } else {
      throw new RangeError('동작이 정의되지 않은 periodType 입니다. ' + splitPeriodType);
    }

    // 대상이 너무 많을 경우
    if (indexes.length > 100) {
      return `${prefix}*`;
    } else {
      return [...new Set(indexes)].map(v => prefix + v).join(',');
    }
  }

  public divideIndexNameByMonth(prefix: string, timestamp: number): string {
    const periodDate = new Date(timestamp * 1000);
    return prefix + DateUtils.yyyyMM(periodDate, '.');
  }

  public divideIndexNameByYear(prefix: string, timestamp: number): string {
    const periodDate = new Date(timestamp * 1000);
    return prefix + DateUtils.yyyy(periodDate);
  }
}
